# Docker Compose para Sistema de Gestión Universitaria (SGU)
# Arquitectura de Microservicios con Docker

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: sgu-postgres
    environment:
      POSTGRES_DB: sgu_db
      POSTGRES_USER: sgu_user
      POSTGRES_PASSWORD: sgu_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sgu-network
    restart: unless-stopped

  # Base de datos MongoDB
  mongodb:
    image: mongo:7.0
    container_name: sgu-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: sgu_admin
      MONGO_INITDB_ROOT_PASSWORD: sgu_mongo_password
      MONGO_INITDB_DATABASE: sgu_notifications
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - sgu-network
    restart: unless-stopped

  # Redis para caché y colas
  redis:
    image: redis:7-alpine
    container_name: sgu-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sgu-network
    restart: unless-stopped

  # Servicio de Autenticación
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: sgu-auth-service
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://sgu_user:sgu_password@postgres:5432/sgu_db
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:3006
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    networks:
      - sgu-network
    restart: unless-stopped
    volumes:
      - ./auth-service:/app
      - /app/node_modules

  # Servicio de Cursos
  courses-service:
    build:
      context: ./courses-service
      dockerfile: Dockerfile
    container_name: sgu-courses-service
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://sgu_user:sgu_password@postgres:5432/sgu_db
      AUTH_SERVICE_URL: http://auth-service:3001
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - auth-service
    networks:
      - sgu-network
    restart: unless-stopped
    volumes:
      - ./courses-service:/app
      - /app/node_modules

  # Servicio de Inscripciones
  enrollment-service:
    build:
      context: ./enrollment-service
      dockerfile: Dockerfile
    container_name: sgu-enrollment-service
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: postgresql://sgu_user:sgu_password@postgres:5432/sgu_db
      AUTH_SERVICE_URL: http://auth-service:3001
      COURSES_SERVICE_URL: http://courses-service:3002
      PAYMENTS_SERVICE_URL: http://payments-service:3004
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:3006
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - auth-service
      - courses-service
    networks:
      - sgu-network
    restart: unless-stopped
    volumes:
      - ./enrollment-service:/app
      - /app/node_modules

  # Servicio de Pagos
  payments-service:
    build:
      context: ./payments-service
      dockerfile: Dockerfile
    container_name: sgu-payments-service
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: postgresql://sgu_user:sgu_password@postgres:5432/sgu_db
      AUTH_SERVICE_URL: http://auth-service:3001
      ENROLLMENT_SERVICE_URL: http://enrollment-service:3003
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:3006
      REDIS_URL: redis://redis:6379
      PAYMENT_GATEWAY_API_KEY: your-payment-gateway-api-key
      PAYMENT_GATEWAY_URL: https://api.payment-gateway.com
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - auth-service
      - enrollment-service
      - redis
    networks:
      - sgu-network
    restart: unless-stopped
    volumes:
      - ./payments-service:/app
      - /app/node_modules

  # Servicio de Notificaciones
  notifications-service:
    build:
      context: ./notifications-service
      dockerfile: Dockerfile
    container_name: sgu-notifications-service
    environment:
      NODE_ENV: production
      PORT: 3006
      MONGODB_URI: mongodb://sgu_admin:sgu_mongo_password@mongodb:27017/sgu_notifications?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      AUTH_SERVICE_URL: http://auth-service:3001
      COURSES_SERVICE_URL: http://courses-service:3002
      ENROLLMENT_SERVICE_URL: http://enrollment-service:3003
      PAYMENTS_SERVICE_URL: http://payments-service:3004
      REDIS_URL: redis://redis:6379
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      EMAIL_FROM: noreply@sgu.edu
    ports:
      - "3006:3006"
    depends_on:
      - mongodb
      - auth-service
      - courses-service
      - enrollment-service
      - payments-service
      - redis
    networks:
      - sgu-network
    restart: unless-stopped
    volumes:
      - ./notifications-service:/app
      - /app/node_modules

  # Frontend SPA (Astro)
  frontend-spa:
    build:
      context: ./frontend-spa
      dockerfile: Dockerfile
    container_name: sgu-frontend
    environment:
      NODE_ENV: production
      PORT: 3000
      VITE_API_BASE_URL: http://localhost:3000
      VITE_AUTH_SERVICE_URL: http://localhost:3001
      VITE_COURSES_SERVICE_URL: http://localhost:3002
      VITE_ENROLLMENT_SERVICE_URL: http://localhost:3003
      VITE_PAYMENTS_SERVICE_URL: http://localhost:3004
      VITE_NOTIFICATIONS_SERVICE_URL: http://localhost:3006
    ports:
      - "3005:3000"
    depends_on:
      - auth-service
      - courses-service
      - enrollment-service
      - payments-service
      - notifications-service
    networks:
      - sgu-network
    restart: unless-stopped
    volumes:
      - ./frontend-spa:/app
      - /app/node_modules

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: sgu-api-gateway
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      REDIS_URL: redis://redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
      COURSES_SERVICE_URL: http://courses-service:3002
      ENROLLMENT_SERVICE_URL: http://enrollment-service:3003
      PAYMENTS_SERVICE_URL: http://payments-service:3004
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:3006
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - courses-service
      - enrollment-service
      - payments-service
      - notifications-service
      - redis
    networks:
      - sgu-network
    restart: unless-stopped
    volumes:
      - ./api-gateway:/app
      - /app/node_modules

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sgu-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/ssl:/etc/nginx/ssl
    depends_on:
      - frontend-spa
      - api-gateway
      - auth-service
      - courses-service
      - enrollment-service
      - payments-service
      - notifications-service
    networks:
      - sgu-network
    restart: unless-stopped

  # Prometheus para monitoreo
  prometheus:
    image: prom/prometheus:latest
    container_name: sgu-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - sgu-network
    restart: unless-stopped

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: sgu-grafana
    ports:
      - "3007:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - sgu-network
    restart: unless-stopped

# Volúmenes persistentes
volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

# Red para comunicación entre servicios
networks:
  sgu-network:
    driver: bridge
